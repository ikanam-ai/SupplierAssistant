import asyncio
import logging

from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    filters,
)

from config import PROGRAMS_TABLE_PATH, TOKEN
from handler import AcademicHandler, AcademicOptions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger("AcademicBot")


import pandas as pd
from telegram import KeyboardButton, ReplyKeyboardMarkup

from config import APP_LLM_NAME, MONGO_DB_PATH


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel-—Ñ–∞–π–ª–∞
def load_programs_data():
    df = pd.read_excel(PROGRAMS_TABLE_PATH)
    return df


# –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
def get_clusters(df):
    return df["cluster"].unique().tolist()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É
def get_programs_by_cluster(df, cluster):
    return df[df["cluster"] == cluster]["program"].tolist()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
df = load_programs_data()
clusters = get_clusters(df)


def academic_handler() -> AcademicHandler:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è AcademicAssistant.

    Returns:
        AcademicHandler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    options = AcademicOptions(
        llm_name=APP_LLM_NAME,
        psycopg_checkpointer=MONGO_DB_PATH,
    )
    handler = AcademicHandler(options)
    return handler


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
handler = academic_handler()


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    welcome_message = """
    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –≤–∞—à –Ω–µ–π—Ä–æ–ø–æ–º–æ—â–Ω–∏–∫ –∏–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ!
    """

    await update.message.reply_text(welcome_message, parse_mode="Markdown", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–πasync
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_input = update.message.text
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_input}")

    if user_input == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
        result, _ = await handler.ahandle_prompt("–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", str(user_id))
        processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", parse_mode="Markdown")
        welcome_message = """
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –≤–∞—à –Ω–µ–π—Ä–æ–ø–æ–º–æ—â–Ω–∏–∫ –∏–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ!
        """
        await processing_message.edit_text(welcome_message, parse_mode="Markdown")
        return

    elif user_input == "üìö –í—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Ç–µ—Ä":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
        cluster_keyboard = [[KeyboardButton(cluster)] for cluster in clusters]
        reply_markup = ReplyKeyboardMarkup(cluster_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä:", reply_markup=reply_markup)
        return

    elif user_input in clusters:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É
        programs = get_programs_by_cluster(df, user_input)
        programs = list(set(programs))
        programs_message = "\n".join([f"‚Ä¢ {program}" for program in programs])
        await update.message.reply_text(
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å 2 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è \n'{user_input}':\n{programs_message}",
            reply_markup=get_main_keyboard(),  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", parse_mode="Markdown")
    try:
        result, _ = await handler.ahandle_prompt(user_input, str(user_id))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(result, parse_mode="Markdown", reply_markup=get_main_keyboard())
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
        await processing_message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ü—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π –†–ê–ù–•–∏–ì–° –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: pkranepa@ranepa.ru, +7 (499) 956-99-99. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º!",
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(),
        )
        await processing_message.delete()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await application.initialize()
    await application.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.")
    await application.updater.start_polling()
    logger.info("Polling –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            logger.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞.")
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π.")
            loop.run_until_complete(run_bot())
    except RuntimeError as e:
        if str(e) == "This event loop is already running":
            logger.info("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ—Ç–∞.")
            loop = asyncio.get_running_loop()
            loop.create_task(run_bot())
            loop.run_forever()
        else:
            raise
