import io
import logging
import wave

import chainlit as cl
import numpy as np
import torch
import whisper

from config import APP_LLM_NAME, MONGO_DB_PATH
from handler import SupplierHandler, SupplierOptions

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

DEVICE = "cuda:1" if torch.cuda.is_available() else "cpu"
WHISPER_MODEL = whisper.load_model("turbo", device=DEVICE)
print(f"Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ {DEVICE}")


def Supplier_handler() -> SupplierHandler:
    options = SupplierOptions(
        llm_name=APP_LLM_NAME,
        psycopg_checkpointer=MONGO_DB_PATH,
    )
    return SupplierHandler(options)


handler = Supplier_handler()


@cl.set_starters
async def set_starters():
    return [
        cl.Starter(
            label="üß† –ò–¥–µ–∏ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
            message="–ú—ã —É—á–∞—Å—Ç–≤—É–µ–º –≤ Tender Hack. –ü–æ–¥—Å–∫–∞–∂–∏ –∏–¥–µ–∏ –¥–ª—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –ü–æ—Ä—Ç–∞–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ ‚Äî —á—Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –∏ –∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥?",
        ),
        cl.Starter(
            label="üóÇÔ∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
            message="–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ü–æ—Ä—Ç–∞–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–∞–ª–æ–±–∞, –≤–æ–ø—Ä–æ—Å –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ, —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞)?",
        ),
        cl.Starter(
            label="üìÑ –ü–∏—Ç—á-–¥–µ–∫ –æ—Ç Icon.Tech",
            message="–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç Icon.Tech –¥–ª—è –∑–∞—â–∏—Ç—ã –Ω–∞ Tender Hack. –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å–ª–∞–π–¥–∞—Ö?",
        ),
        cl.Starter(
            label="ü§ñ –ë–æ—Ç: –æ—Ç–≤–µ—Ç—ã –∏ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
            message="–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏, FAQ, –∑–∞–∫–æ–Ω–∞–º–∏)? –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞.",
        ),
    ]


@cl.on_chat_start
async def start():
    cl.user_session.set("audio_chunks", [])


@cl.on_message
async def main(message: cl.Message):
    user_id = cl.user_session.get("id") or "default_user"
    user_input = message.content
    cl.user_session.set("last_user_input", user_input)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥
    logger.info(f"üì® –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: {user_input}")

    msg = cl.Message(content="")
    await msg.send()

    result, _ = await handler.ahandle_prompt(user_input, str(user_id))

    # FIXME: fix images part
    # image_paths = [img["image_path"] for img in image_data]
    # unique_figures = [img["number_text"] for img in image_data]

    # image_elements = []
    # for fig_id, img in zip(unique_figures, image_paths):
    #     image_path = os.path.join(IMAGES_PATH, img)
    #     if os.path.isfile(image_path):
    #         image_elements.append(
    #             cl.Image(name=fig_id, path=image_path)
    #         )
    #     else:
    #         logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")

    await msg.stream_token(result)
    await msg.update()

    # if image_elements:
    #     await cl.Message(
    #         content=", ".join(unique_figures),
    #         elements=image_elements
    #     ).send()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
    action_message = cl.AskActionMessage(
        content="ü§î –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–µ–Ω –±—ã–ª –æ—Ç–≤–µ—Ç? (–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        actions=[
            cl.Action(name="mark", label="üò° 1", payload={"value": 1}),
            cl.Action(name="mark", label="üôÅ 2", payload={"value": 2}),
            cl.Action(name="mark", label="üòê 3", payload={"value": 3}),
            cl.Action(name="mark", label="üôÇ 4", payload={"value": 4}),
            cl.Action(name="mark", label="üòÉ 5", payload={"value": 5}),
            cl.Action(name="next_question", label="–ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", payload={"value": "next"}),
        ],
    )
    response = await action_message.send()

    if response and "payload" in response:
        value = response["payload"].get("value")
        if value != "next":
            handler.assistant._save_flat_log(user_id, "rating", value, value)
            await cl.Message(content="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!").send()

        else:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏
            await cl.Message(content="–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!").send()


@cl.on_audio_start
async def on_audio_start():
    cl.user_session.set("audio_chunks", [])
    return True


@cl.on_audio_chunk
async def on_audio_chunk(chunk: cl.InputAudioChunk):
    chunks = cl.user_session.get("audio_chunks")
    audio_data = np.frombuffer(chunk.data, dtype=np.int16)
    chunks.append(audio_data)


@cl.on_audio_end
async def on_audio_end():
    audio_chunks = cl.user_session.get("audio_chunks")

    if not audio_chunks:
        await cl.Message(content="üîá –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ").send()
        return

    audio_data = np.concatenate(audio_chunks)
    wav_buffer = io.BytesIO()
    with wave.open(wav_buffer, "wb") as wav_file:
        wav_file.setnchannels(1)
        wav_file.setsampwidth(2)
        wav_file.setframerate(24000)
        wav_file.writeframes(audio_data.tobytes())
    wav_buffer.seek(0)

    with open("temp_audio.wav", "wb") as f:
        f.write(wav_buffer.read())

    result = WHISPER_MODEL.transcribe("temp_audio.wav")
    transcription = result["text"]
    logger.info(f"üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {transcription}")

    await cl.Message(
        author="–í—ã",
        type="user_message",
        content=transcription,
        elements=[
            cl.Audio(content=wav_buffer.getvalue(), mime="audio/wav"),
        ],
    ).send()

    await main(cl.Message(content=transcription))
